name: CI pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: expense-manager
  REGISTRY: docker.io

permissions:
  contents: read
  pull-requests: read

jobs:
  build-test-sonar:
    name: Build, Unit/IT tests, SonarCloud
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: expense_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d expense_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    # Spring Boot will pick these env vars automatically
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/expense_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      # If you use Flyway or Liquibase, keep them enabled by default.
      # Example toggles (uncomment only if you *must*):
      # SPRING_FLYWAY_ENABLED: "true"
      # SPRING_LIQUIBASE_ENABLED: "true"
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Sonar PR decoration

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Install psql client (for pg_isready)
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres -d expense_db && exit 0
            echo "Postgres not ready yet... ($i)"
            sleep 2
          done
          echo "Postgres failed to become ready in time." && exit 1

      - name: Run tests (unit + integration) with JaCoCo coverage
        run: mvn -B clean verify -DskipITs=false -DskipTests=false

      - name: SonarCloud Scan
        run: >
          mvn -B -ntp org.sonarsource.scanner.maven:sonar-maven-plugin:5.2.0.4988:sonar
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.organization=manal-lahmidi
          -Dsonar.projectKey=Manal-Lahmidi_expense-manager
          -Dsonar.token=${SONAR_TOKEN}

      - name: Upload surefire & failsafe reports on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: maven-test-reports
          path: |
            **/target/surefire-reports/*
            **/target/failsafe-reports/*

  docker:
    name: Build & Push Docker image
    needs: build-test-sonar
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long
            type=ref,event=branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            MAVEN_ARGS=-DskipTests

      - name: Show pushed image tags
        run: |
          echo "Docker image pushed successfully!"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
